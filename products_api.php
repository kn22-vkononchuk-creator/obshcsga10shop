<?php
// products_api.php

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ ---
ini_set('display_errors', 0); 
ini_set('log_errors', 1);
ini_set('error_log', __DIR__ . '/php-error.log');
error_reporting(E_ALL);

header("Content-Type: application/json"); 
header("Access-Control-Allow-Origin: *"); 
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");

// --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ---
$servername = "localhost"; 
$username = "thebl526_1"; 
$password = "06020209Vit"; 
$dbname = "thebl526_1"; 

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram Bot API —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å ---
define('TELEGRAM_BOT_TOKEN', '8346536291:AAFP8GoxLgF9VPrKveiIGCkqGM4v-9Hr98U');
define('ADMIN_TELEGRAM_CHAT_ID', '650910476');
define('UPLOAD_DIR', 'uploads/');
define('WEBSITE_BASE_URL', 'https://www.obshchaga10shop.website/'); // <--- –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω

// --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ---
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
    http_response_code(500);
    echo json_encode(["status" => "error", "message" => "Connection failed: " . $conn->connect_error]);
    exit();
}
$conn->set_charset("utf8mb4");

// --- –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è JSON-–¥–∞–Ω–∏—Ö ---
$request_data = [];

// --- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è action ---
$action = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ 'action' –∑ POST-–¥–∞–Ω–∏—Ö (–¥–ª—è form-data)
    if (isset($_POST['action'])) {
        $action = $_POST['action'];
    } else {
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ $_POST, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ JSON-—Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
        $input = file_get_contents('php://input');
        // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å JSON
        $decoded_input = json_decode($input, true);
        if (json_last_error() === JSON_ERROR_NONE) {
            $request_data = $decoded_input;
            if (isset($request_data['action'])) {
                $action = $request_data['action'];
            }
        } else {
            // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON
            error_log("JSON Decode Error: " . json_last_error_msg() . " Input: " . $input);
            // –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É –∫–ª—ñ—î–Ω—Ç—É, —è–∫—â–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥—ñ—ó
            // http_response_code(400);
            // echo json_encode(["status" => "error", "message" => "Invalid JSON input."]);
            // exit();
        }
    }
} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
    // –î–ª—è GET-–∑–∞–ø–∏—Ç—ñ–≤ 'action' –∑–∞–≤–∂–¥–∏ –≤ URL
    $action = isset($_GET['action']) ? $_GET['action'] : '';
}

// --- Telegram helper functions ---
/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram.
 * @param string $chat_id ID —á–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.
 * @param string $message –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø—ñ–¥—Ç—Ä–∏–º—É—î Markdown).
 * @return bool True —É —Ä–∞–∑—ñ —É—Å–ø—ñ—Ö—É, false —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏.
 */
function sendTelegramMessage($chat_id, $message) {
    $url = "https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/sendMessage";
    $data = [
        'chat_id' => $chat_id,
        'text' => $message,
        'parse_mode' => 'Markdown' // –î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è Markdown
    ];

    $options = [
        'http' => [
            'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
            'method'  => 'POST',
            'content' => http_build_query($data),
            'ignore_errors' => true, // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
        ],
    ];
    $context  = stream_context_create($options);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ @ –¥–ª—è –ø—Ä–∏–¥—É—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å, —è–∫—â–æ file_get_contents –Ω–µ –º–æ–∂–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è
    $result = @file_get_contents($url, false, $context); 

    if ($result === FALSE) {
        error_log("Telegram API call failed. Check network or bot token. Message: " . $message);
        return false;
    }
    
    $response_data = json_decode($result, true);
    if (isset($response_data['ok']) && $response_data['ok'] === false) {
        error_log("Telegram API error: " . $response_data['description'] . ". Chat ID: " . $chat_id . ". Message: " . $message);
        return false;
    }

    return true; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –≤ Telegram.
 * @param string $chat_id ID —á–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.
 * @param string $photo_path –õ–æ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ.
 * @param string|null $caption –ü—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ (–ø—ñ–¥—Ç—Ä–∏–º—É—î Markdown).
 * @return bool True —É —Ä–∞–∑—ñ —É—Å–ø—ñ—Ö—É, false —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏.
 */
function sendTelegramPhoto($chat_id, $photo_path, $caption = null) {
    if (!file_exists($photo_path)) {
        error_log("Telegram API: Photo file not found at " . $photo_path);
        return false;
    }

    $url = "https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/sendPhoto";

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    // –î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CURLFile
    $post_fields = [
        'chat_id' => $chat_id,
        'photo' => new CURLFile(realpath($photo_path)),
        'parse_mode' => 'Markdown'
    ];

    if ($caption) {
        $post_fields['caption'] = $caption;
    }

    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        error_log("Telegram API cURL error: " . curl_error($ch));
        curl_close($ch);
        return false;
    }
    curl_close($ch);

    $response_data = json_decode($result, true);
    if (isset($response_data['ok']) && $response_data['ok'] === false) {
        error_log("Telegram API error (sendPhoto): " . $response_data['description'] . ". Chat ID: " . $chat_id);
        return false;
    }

    return true;
}

/**
 * –û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram Bot API (Webhook).
 * –†–µ—î—Å—Ç—Ä—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å /start.
 * @param mysqli $conn –û–±'—î–∫—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
 */
function handleTelegramWebhook($conn) {
    $update = json_decode(file_get_contents('php://input'), true);

    if (isset($update['message'])) {
        $message = $update['message'];
        $chat_id = $message['chat']['id'];
        $text = $message['text'];
        $username = isset($message['from']['username']) ? $message['from']['username'] : null;

        if ($text === '/start') {
            if ($username) {
                // Check if user already registered
                $stmt = $conn->prepare("SELECT telegram_chat_id FROM telegram_users WHERE telegram_username = ?");
                $stmt->bind_param("s", $username);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    // User already registered
                    sendTelegramMessage($chat_id, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –±–æ—Ç—ñ, @{$username}! –í–∞—à Chat ID: `{$chat_id}`. –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.");
                } else {
                    // Register new user
                    $stmt = $conn->prepare("INSERT INTO telegram_users (telegram_username, telegram_chat_id) VALUES (?, ?)");
                    $stmt->bind_param("ss", $username, $chat_id);
                    if ($stmt->execute()) {
                        sendTelegramMessage($chat_id, "–í—ñ—Ç–∞—î–º–æ, @{$username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∞—à Chat ID: `{$chat_id}`. –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ ObshchagaSHOP.");

                        // Notify admin about new user registration
                        $admin_message = "üÜï *–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ!*\n\n";
                        $admin_message .= "Username: @{$username}\n";
                        $admin_message .= "Chat ID: `{$chat_id}`";
                        sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, $admin_message);
                    } else {
                        sendTelegramMessage($chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                        error_log("Error registering Telegram user: " . $stmt->error);
                    }
                }
                $stmt->close();
            } else {
                sendTelegramMessage($chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (username) —É —Å–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ Telegram, —â–æ–± —è –º—ñ–≥ –≤–∞—Å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏.");
            }
        } elseif ($text === '/usercount') {
            // Only allow admin to get user count
            if ($chat_id == ADMIN_TELEGRAM_CHAT_ID) {
                $result = $conn->query("SELECT COUNT(*) as cnt FROM telegram_users");
                $count = 0;
                if ($result) {
                    $row = $result->fetch_assoc();
                    $count = $row['cnt'];
                }
                sendTelegramMessage($chat_id, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *{$count}*");
            } else {
                sendTelegramMessage($chat_id, "–í–∏–±–∞—á—Ç–µ, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            }
        } elseif ($text === '/myorders') { // NEW: Command to view user's orders
            $stmt = $conn->prepare("SELECT id, total_amount, status, created_at FROM orders WHERE customer_telegram_chat_id = ? ORDER BY created_at DESC");
            $stmt->bind_param("s", $chat_id);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows > 0) {
                $message_text = "üìú *–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n";
                while ($order = $result->fetch_assoc()) {
                    $message_text .= "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order['id']}`\n";
                    $message_text .= "–°—É–º–∞: *{$order['total_amount']} –≥—Ä–Ω*\n";
                    $message_text .= "–°—Ç–∞—Ç—É—Å: *{$order['status']}*\n";
                    $message_text .= "–î–∞—Ç–∞: " . date('d.m.Y H:i', strtotime($order['created_at'])) . "\n";
                    
                    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–µ
                    if ($order['status'] === 'New') {
                        $message_text .= "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å: /cancel\_order\_" . $order['id'] . "\n";
                    }
                    $message_text .= "--------------------\n";
                }
                sendTelegramMessage($chat_id, $message_text);
            } else {
                sendTelegramMessage($chat_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.");
            }
            $stmt->close();
        } elseif (strpos($text, '/cancel_order_') === 0) { // NEW: Command to cancel an order
            $order_id = (int)str_replace('/cancel_order_', '', $text);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ –º–∞—î —Å—Ç–∞—Ç—É—Å 'New'
            $stmt = $conn->prepare("SELECT status FROM orders WHERE id = ? AND customer_telegram_chat_id = ?");
            $stmt->bind_param("is", $order_id, $chat_id);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows > 0) {
                $order = $result->fetch_assoc();
                if ($order['status'] === 'New') {
                    // –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    $conn->begin_transaction();
                    try {
                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∫–ª–∞–¥
                        $stmt_items = $conn->prepare("SELECT product_id, quantity FROM order_items WHERE order_id = ?");
                        $stmt_items->bind_param("i", $order_id);
                        $stmt_items->execute();
                        $items_result = $stmt_items->get_result();

                        while ($item = $items_result->fetch_assoc()) {
                            $stmt_update_stock = $conn->prepare("UPDATE products SET in_stock = in_stock + ? WHERE id = ?");
                            $stmt_update_stock->bind_param("ii", $item['quantity'], $item['product_id']);
                            $stmt_update_stock->execute();
                            $stmt_update_stock->close();
                        }
                        $stmt_items->close();

                        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        $stmt_update_order = $conn->prepare("UPDATE orders SET status = 'Cancelled' WHERE id = ?");
                        $stmt_update_order->bind_param("i", $order_id);
                        $stmt_update_order->execute();
                        $stmt_update_order->close();

                        $conn->commit();
                        sendTelegramMessage($chat_id, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–æ–≤–∞—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥.");
                        sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, "‚ö†Ô∏è *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø—Ü–µ–º* (@{$username}). –¢–æ–≤–∞—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥.");

                    } catch (Exception $e) {
                        $conn->rollback();
                        sendTelegramMessage($chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}`. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                        error_log("Error cancelling order from Telegram: " . $e->getMessage());
                    }
                } else {
                    sendTelegramMessage($chat_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å: *{$order['status']}*.");
                }
            } else {
                sendTelegramMessage($chat_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ —î –π–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º.");
            }
            $stmt->close();
        }
        else {
            sendTelegramMessage($chat_id, "–Ø –±–æ—Ç ObshchagaSHOP. –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start. –©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /myorders.");
        }
    }
    // Always return 200 OK to prevent Telegram from resending updates
    http_response_code(200);
    exit();
}


// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram Webhook
if (isset($_GET['webhook']) && $_GET['webhook'] === 'telegram') {
    handleTelegramWebhook($conn);
}

// --- –û–±—Ä–æ–±–∫–∞ GET-–∑–∞–ø–∏—Ç—ñ–≤ ---
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    switch ($action) {
        case 'get_categories':
            $sql = "SELECT id, name FROM categories ORDER BY name ASC";
            $result = $conn->query($sql);
            $categories = [];
            while ($row = $result->fetch_assoc()) {
                $categories[] = $row;
            }
            echo json_encode(["status" => "success", "data" => $categories]);
            break;

        case 'get_products':
            $category_id = isset($_GET['category_id']) && $_GET['category_id'] !== '' ? (int)$_GET['category_id'] : null;
            $sort = isset($_GET['sort']) ? $_GET['sort'] : null;
            $search_term = isset($_GET['search']) ? '%' . $conn->real_escape_string($_GET['search']) . '%' : null; // –î–æ–¥–∞–Ω–æ –ø–æ—à—É–∫–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω

            $where_clauses = [];
            $bind_types = "";
            $bind_values = [];

            if ($category_id !== null) {
                $where_clauses[] = "category_id = ?";
                $bind_types .= "i";
                $bind_values[] = $category_id;
            }
            
            // –î–æ–¥–∞–Ω–æ —É–º–æ–≤—É –ø–æ—à—É–∫—É
            if ($search_term !== null) {
                $where_clauses[] = "(name LIKE ? OR description LIKE ?)";
                $bind_types .= "ss";
                $bind_values[] = $search_term;
                $bind_values[] = $search_term;
            }

            $order_by = " ORDER BY created_at DESC ";
            if ($sort === 'price_asc') {
                $order_by = " ORDER BY price ASC ";
            } elseif ($sort === 'price_desc') {
                $order_by = " ORDER BY price DESC ";
            } elseif ($sort === 'date_asc') {
                $order_by = " ORDER BY created_at ASC ";
            } elseif ($sort === 'date_desc') {
                $order_by = " ORDER BY created_at DESC ";
            }

            $sql = "SELECT id, name, description, price, image_url, in_stock, discount_percentage, is_on_sale, category_id, created_at FROM products";
            if (!empty($where_clauses)) {
                $sql .= " WHERE " . implode(" AND ", $where_clauses);
            }
            $sql .= $order_by;

            $stmt = $conn->prepare($sql);
            if (!empty($bind_values)) {
                $stmt->bind_param($bind_types, ...$bind_values);
            }
            $stmt->execute();
            $result = $stmt->get_result();

            $products = [];
            while($row = $result->fetch_assoc()) {
                $row['price'] = (float)$row['price'];
                $row['in_stock'] = (int)$row['in_stock'];
                $row['discount_percentage'] = (int)$row['discount_percentage'];
                $row['is_on_sale'] = (bool)$row['is_on_sale'];
                $products[] = $row;
            }
            $stmt->close();

            echo json_encode(["status" => "success", "data" => $products]);
            break;

        case 'get_telegram_users': // NEW ACTION
            $sql = "SELECT telegram_username, telegram_chat_id FROM telegram_users ORDER BY telegram_username ASC";
            $result = $conn->query($sql);
            $users = [];
            while ($row = $result->fetch_assoc()) {
                $users[] = $row;
            }
            echo json_encode(["status" => "success", "data" => $users]);
            break;

        case 'get_orders': // NEW ACTION: Get all orders for admin panel
            $sql = "SELECT o.id, o.customer_name, o.customer_telegram, o.customer_phone, o.customer_address, o.needs_delivery, o.total_amount, o.status, o.created_at, o.customer_telegram_chat_id,
                           GROUP_CONCAT(CONCAT(oi.product_name, ' (', oi.product_price, ' –≥—Ä–Ω) x ', oi.quantity, ' —à—Ç') SEPARATOR '; ') AS items_summary
                    FROM orders o
                    JOIN order_items oi ON o.id = oi.order_id
                    GROUP BY o.id
                    ORDER BY o.created_at DESC";
            $result = $conn->query($sql);
            $orders = [];
            while ($row = $result->fetch_assoc()) {
                $row['total_amount'] = (float)$row['total_amount'];
                $row['needs_delivery'] = (bool)$row['needs_delivery'];
                $orders[] = $row;
            }
            echo json_encode(["status" => "success", "data" => $orders]);
            break;

        default:
            http_response_code(400);
            echo json_encode(["status" => "error", "message" => "Unknown GET action."]);
            break;
    }
    $conn->close();
    exit();
}

// --- –û–±—Ä–æ–±–∫–∞ POST-–∑–∞–ø–∏—Ç—ñ–≤ ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    switch ($action) {
        case 'admin_login':
            if (isset($_POST['username']) && isset($_POST['password'])) {
                $username = $conn->real_escape_string($_POST['username']);
                $password = $_POST['password'];

                $stmt = $conn->prepare("SELECT password_hash FROM admins WHERE username = ?");
                $stmt->bind_param("s", $username);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $row = $result->fetch_assoc();
                    $hashed_password = $row['password_hash'];

                    if (password_verify($password, $hashed_password)) {
                        echo json_encode(["status" => "success", "authenticated" => true]);
                    } else {
                        echo json_encode(["status" => "error", "message" => "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.", "authenticated" => false]);
                    }
                } else {
                    echo json_encode(["status" => "error", "message" => "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.", "authenticated" => false]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "Missing username or password for admin login."]);
            }
            break;

        case 'add_category':
            if (isset($_POST['name']) && !empty(trim($_POST['name']))) {
                $name = $conn->real_escape_string(trim($_POST['name']));
                $stmt = $conn->prepare("INSERT INTO categories (name) VALUES (?)");
                $stmt->bind_param("s", $name);
                if ($stmt->execute()) {
                    echo json_encode(["status" => "success", "id" => $conn->insert_id]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–Ü–º'—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º."]);
            }
            break;

        case 'update_category':
            if (isset($_POST['id']) && isset($_POST['name'])) {
                $id = (int)$_POST['id'];
                $name = $conn->real_escape_string(trim($_POST['name']));
                if ($name === '') {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–Ü–º'—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º."]);
                    break;
                }
                $stmt = $conn->prepare("UPDATE categories SET name = ? WHERE id = ?");
                $stmt->bind_param("si", $name, $id);
                if ($stmt->execute()) {
                    echo json_encode(["status" => "success"]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."]);
            }
            break;

        case 'delete_category':
            if (isset($_POST['id'])) {
                $id = (int)$_POST['id'];

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                $stmt_check = $conn->prepare("SELECT COUNT(*) as cnt FROM products WHERE category_id = ?");
                $stmt_check->bind_param("i", $id);
                $stmt_check->execute();
                $result_check = $stmt_check->get_result();
                $count = $result_check->fetch_assoc()['cnt'];
                $stmt_check->close();

                if ($count > 0) {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –±–æ –≤ –Ω—ñ–π —î —Ç–æ–≤–∞—Ä–∏."]);
                    break;
                }

                $stmt = $conn->prepare("DELETE FROM categories WHERE id = ?");
                $stmt->bind_param("i", $id);
                if ($stmt->execute()) {
                    echo json_encode(["status" => "success"]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."]);
            }
            break;

        case 'add_product':
            if (isset($_POST['name'], $_POST['price'], $_POST['in_stock'], $_POST['discount_percentage'], $_POST['is_on_sale'])) {
                $name = $conn->real_escape_string($_POST['name']);
                $description = isset($_POST['description']) ? $conn->real_escape_string($_POST['description']) : null;
                $price = (float)$_POST['price'];
                $in_stock = (int)$_POST['in_stock'];
                $discount_percentage = (int)$_POST['discount_percentage'];
                $is_on_sale = (bool)$_POST['is_on_sale'];
                $category_id = isset($_POST['category_id']) && $_POST['category_id'] !== '' ? (int)$_POST['category_id'] : null;

                $image_url_to_db = null;

                // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if (isset($_FILES['image_file']) && $_FILES['image_file']['error'] === UPLOAD_ERR_OK) {
                    $file = $_FILES['image_file'];
                    $file_name = uniqid() . '_' . basename($file['name']); // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
                    $target_file = UPLOAD_DIR . $file_name;

                    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
                    if (!is_dir(UPLOAD_DIR)) {
                        mkdir(UPLOAD_DIR, 0777, true); // 0777 - –ø–æ–≤–Ω—ñ –ø—Ä–∞–≤–∞, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∫—Ä–∞—â–µ 0755
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É (—Ç—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
                    $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
                    $allowed_extensions = ['jpg', 'jpeg', 'png', 'gif'];
                    if (!in_array($file_extension, $allowed_extensions)) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: JPG, PNG, GIF."]);
                        break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 5MB)
                    if ($file['size'] > 5 * 1024 * 1024) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º—É–º 5MB."]);
                        break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                    }

                    if (move_uploaded_file($file['tmp_name'], $target_file)) {
                        $image_url_to_db = $conn->real_escape_string($file_name); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ñ–∞–π–ª—É
                    } else {
                        http_response_code(500);
                        echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É."]);
                        break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                    }
                } elseif (isset($_POST['image_url']) && !empty($_POST['image_url'])) {
                    // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∞–ª–µ —î URL
                    $image_url_to_db = $conn->real_escape_string($_POST['image_url']);
                } else {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å URL."]);
                    break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                }

                $stmt = $conn->prepare("INSERT INTO products (name, description, price, image_url, in_stock, discount_percentage, is_on_sale, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                $stmt->bind_param("ssdsiiii", $name, $description, $price, $image_url_to_db, $in_stock, $discount_percentage, $is_on_sale, $category_id);

                if ($stmt->execute()) {
                    echo json_encode(["status" => "success", "id" => $conn->insert_id]);
                } else {
                    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –ë–î
                    if ($image_url_to_db && !filter_var($image_url_to_db, FILTER_VALIDATE_URL) && file_exists(UPLOAD_DIR . $image_url_to_db)) {
                        unlink(UPLOAD_DIR . $image_url_to_db);
                    }
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."]);
            }
            break;

        case 'update_product':
            if (isset($_POST['id'], $_POST['name'], $_POST['price'], $_POST['in_stock'], $_POST['discount_percentage'], $_POST['is_on_sale'])) {
                $id = (int)$_POST['id'];
                $name = $conn->real_escape_string($_POST['name']);
                $description = isset($_POST['description']) ? $conn->real_escape_string($_POST['description']) : null;
                $price = (float)$_POST['price'];
                $in_stock = (int)$_POST['in_stock'];
                $discount_percentage = (int)$_POST['discount_percentage'];
                $is_on_sale = (bool)$_POST['is_on_sale'];
                $category_id = isset($_POST['category_id']) && $_POST['category_id'] !== '' ? (int)$_POST['category_id'] : null;

                $update_fields = [
                    "name = ?",
                    "description = ?",
                    "price = ?",
                    "in_stock = ?",
                    "discount_percentage = ?",
                    "is_on_sale = ?",
                    "category_id = ?"
                ];
                $bind_types = "ssdsiii";
                $bind_values = [$name, $description, $price, $in_stock, $discount_percentage, $is_on_sale, $category_id];

                $current_image_url = null;
                $stmt_get_image = $conn->prepare("SELECT image_url FROM products WHERE id = ?");
                $stmt_get_image->bind_param("i", $id);
                $stmt_get_image->execute();
                $result_get_image = $stmt_get_image->get_result();
                if ($result_get_image->num_rows > 0) {
                    $row = $result_get_image->fetch_assoc();
                    $current_image_url = $row['image_url'];
                }
                $stmt_get_image->close();

                $image_updated = false;
                $image_url_to_db = $current_image_url;

                if (isset($_FILES['image_file']) && $_FILES['image_file']['error'] === UPLOAD_ERR_OK) {
                    $file = $_FILES['image_file'];
                    $file_name = uniqid() . '_' . basename($file['name']);
                    $target_file = UPLOAD_DIR . $file_name;

                    if (!is_dir(UPLOAD_DIR)) {
                        mkdir(UPLOAD_DIR, 0777, true);
                    }

                    $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
                    $allowed_extensions = ['jpg', 'jpeg', 'png', 'gif'];
                    if (!in_array($file_extension, $allowed_extensions)) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É."]);
                        break;
                    }

                    if ($file['size'] > 5 * 1024 * 1024) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π."]);
                        break;
                    }

                    if (move_uploaded_file($file['tmp_name'], $target_file)) {
                        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
                        if ($current_image_url && !filter_var($current_image_url, FILTER_VALIDATE_URL) && file_exists(UPLOAD_DIR . $current_image_url)) {
                            unlink(UPLOAD_DIR . $current_image_url);
                        }
                        $image_url_to_db = $conn->real_escape_string($file_name);
                        $image_updated = true;
                    } else {
                        http_response_code(500);
                        echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."]);
                        break;
                    }
                } elseif (isset($_POST['image_url_changed']) && $_POST['image_url_changed'] === 'true') {
                    // –Ø–∫—â–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ (–∞–±–æ –æ—á–∏—â–µ–Ω–æ)
                    $new_image_url = trim($_POST['image_url']);
                    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
                    if ($current_image_url && !filter_var($current_image_url, FILTER_VALIDATE_URL) && file_exists(UPLOAD_DIR . $current_image_url)) {
                        unlink(UPLOAD_DIR . $current_image_url);
                    }
                    $image_url_to_db = empty($new_image_url) ? null : $conn->real_escape_string($new_image_url);
                    $image_updated = true;
                }

                if ($image_updated) {
                    $update_fields[] = "image_url = ?";
                    $bind_types .= "s";
                    $bind_values[] = $image_url_to_db;
                }

                $sql = "UPDATE products SET " . implode(", ", $update_fields) . " WHERE id = ?";
                $bind_types .= "i"; // –î–æ–¥–∞—î–º–æ —Ç–∏–ø –¥–ª—è ID
                $bind_values[] = $id; // –î–æ–¥–∞—î–º–æ ID –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –∑–Ω–∞—á–µ–Ω—å

                $stmt = $conn->prepare($sql);
                $stmt->bind_param($bind_types, ...$bind_values);

                if ($stmt->execute()) {
                    echo json_encode(["status" => "success"]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."]);
            }
            break;

        case 'delete_product':
            if (isset($_POST['id'])) {
                $id = (int)$_POST['id'];

                // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                $stmt = $conn->prepare("SELECT image_url FROM products WHERE id = ?");
                $stmt->bind_param("i", $id);
                $stmt->execute();
                $result = $stmt->get_result();
                $image_to_delete = null;
                if ($result->num_rows > 0) {
                    $row = $result->fetch_assoc();
                    $image_to_delete = $row['image_url'];
                }
                $stmt->close();

                $stmt = $conn->prepare("DELETE FROM products WHERE id = ?");
                $stmt->bind_param("i", $id);

                if ($stmt->execute()) {
                    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞, —è–∫—â–æ —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
                    if ($image_to_delete && !filter_var($image_to_delete, FILTER_VALIDATE_URL) && file_exists(UPLOAD_DIR . $image_to_delete)) {
                        unlink(UPLOAD_DIR . $image_to_delete);
                    }
                    echo json_encode(["status" => "success"]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "Error deleting product: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "Missing ID for deletion."]);
            }
            break;
            
        case 'update_product_stock':
            if (isset($_POST['id']) && isset($_POST['in_stock'])) {
                $id = (int)$_POST['id'];
                $in_stock = (int)$_POST['in_stock'];

                $stmt = $conn->prepare("UPDATE products SET in_stock = ? WHERE id = ?");
                $stmt->bind_param("ii", $in_stock, $id);

                if ($stmt->execute()) {
                    echo json_encode(["status" => "success"]);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "Error updating product stock: " . $stmt->error]);
                }
                $stmt->close();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "Missing ID or in_stock for updating product stock."]);
            }
            break;

        case 'notify_stock_update':
            if (isset($_POST['product_id']) && isset($_POST['product_name']) && isset($_POST['new_stock']) && isset($_POST['website_url'])) {
                $product_id = (int)$_POST['product_id'];
                $product_name = $conn->real_escape_string($_POST['product_name']);
                $new_stock = (int)$_POST['new_stock'];
                $website_url = $conn->real_escape_string($_POST['website_url']); // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ JS

                $message = "‚ú® *–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ ObshchagaSHOP!* ‚ú®\n\n";
                $message .= "–¢–æ–≤–∞—Ä: *{$product_name}*\n";
                if ($new_stock > 0) {
                    $message .= "–¢–µ–ø–µ—Ä –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: *{$new_stock} —à—Ç.* üéâ\n";
                } else {
                    $message .= "–ù–∞ –∂–∞–ª—å, —Ç–æ–≤–∞—Ä *–∑–∞–∫—ñ–Ω—á–∏–≤—Å—è* üòî\n";
                }
                $message .= "\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∞–π—Ç—ñ]({$website_url}#products)\n"; // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
                $message .= "–ü–æ—Å–ø—ñ—à–∞–π—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!";

                // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ chat_id –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                $stmt = $conn->prepare("SELECT telegram_chat_id FROM telegram_users");
                $stmt->execute();
                $result = $stmt->get_result();

                $sent_count = 0;
                if ($result->num_rows > 0) {
                    while($row = $result->fetch_assoc()) {
                        if (sendTelegramMessage($row['telegram_chat_id'], $message)) {
                            $sent_count++;
                        }
                    }
                }
                $stmt->close();

                echo json_encode(["status" => "success", "sent_notifications" => $sent_count]);

            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "Missing product_id, product_name, new_stock or website_url for notification."]);
            }
            break;

        case 'send_custom_notification':
            if (isset($_POST['message_text'])) {
                $message_text = trim($_POST['message_text']);

                $stmt = $conn->prepare("SELECT telegram_chat_id FROM telegram_users");
                $stmt->execute();
                $result = $stmt->get_result();

                $photo_path = null;
                if (isset($_FILES['image_file']) && $_FILES['image_file']['error'] === UPLOAD_ERR_OK) {
                    $file = $_FILES['image_file'];
                    $file_name = uniqid() . '_' . basename($file['name']);
                    $target_file = UPLOAD_DIR . $file_name;

                    if (!is_dir(UPLOAD_DIR)) {
                        mkdir(UPLOAD_DIR, 0777, true);
                    }

                    $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
                    $allowed_extensions = ['jpg', 'jpeg', 'png', 'gif'];
                    if (!in_array($file_extension, $allowed_extensions)) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."]);
                        exit();
                    }

                    if ($file['size'] > 5 * 1024 * 1024) {
                        http_response_code(400);
                        echo json_encode(["status" => "error", "message" => "–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π."]);
                        exit();
                    }

                    if (!move_uploaded_file($file['tmp_name'], $target_file)) {
                        http_response_code(500);
                        echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."]);
                        exit();
                    }
                    $photo_path = $target_file;
                }

                $sent_count = 0;
                if ($result->num_rows > 0) {
                    while ($row = $result->fetch_assoc()) {
                        $chat_id = $row['telegram_chat_id'];
                        $full_message = "*–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ ObshchagaSHOP*\n\n";
                        $full_message .= $message_text;
                        $full_message .= "\n\n[–í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç](" . WEBSITE_BASE_URL . ")";

                        if ($photo_path) {
                            $sent = sendTelegramPhoto($chat_id, $photo_path, $full_message);
                            if ($sent) $sent_count++;
                        } else {
                            $sent = sendTelegramMessage($chat_id, $full_message);
                            if ($sent) $sent_count++;
                        }
                    }
                }
                $stmt->close();

                if ($photo_path && file_exists($photo_path)) {
                    unlink($photo_path);
                }

                echo json_encode(["status" => "success", "sent_notifications" => $sent_count]);
                exit();
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."]);
                exit();
            }
            break;

        case 'place_order':
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ $request_data, —è–∫–∞ –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –¥–µ–∫–æ–¥–æ–≤–∞–Ω—ñ JSON-–¥–∞–Ω—ñ
            if (isset($request_data['total_amount']) && isset($request_data['items']) && is_array($request_data['items']) && isset($request_data['customer'])) {
                $total_amount = (float)$request_data['total_amount'];
                $items = $request_data['items'];
                $customer_info = $request_data['customer'];

                $customer_name = $conn->real_escape_string($customer_info['name']);
                $customer_telegram = $conn->real_escape_string($customer_info['telegram']);
                $customer_phone = $conn->real_escape_string($customer_info['phone']);
                $customer_address = $conn->real_escape_string($customer_info['address']);
                $needs_delivery = $customer_info['needs_delivery'] ? 1 : 0;
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á Telegram
                $stmt = $conn->prepare("SELECT telegram_chat_id FROM telegram_users WHERE telegram_username = ?");
                $stmt->bind_param("s", $customer_telegram);
                $stmt->execute();
                $result = $stmt->get_result();
                if ($result->num_rows === 0) {
                    http_response_code(403); // Forbidden
                    echo json_encode(["status" => "error", "message" => "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –Ω–∞—à–æ–º—É Telegram –±–æ—Ç—ñ (@obschaga10shop_bot) –∫–æ–º–∞–Ω–¥–æ—é /start, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."]);
                    $stmt->close();
                    break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                }
                $customer_telegram_chat_id = $result->fetch_assoc()['telegram_chat_id'];
                $stmt->close();

                // 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —Ç–∞–±–ª–∏—Ü—ñ orders
                $stmt = $conn->prepare("INSERT INTO orders (total_amount, status, customer_name, customer_telegram, customer_phone, customer_address, needs_delivery, customer_telegram_chat_id) VALUES (?, 'New', ?, ?, ?, ?, ?, ?)");
                $stmt->bind_param("dssssis", $total_amount, $customer_name, $customer_telegram, $customer_phone, $customer_address, $needs_delivery, $customer_telegram_chat_id);
                
                if (!$stmt->execute()) {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "Error creating order: " . $stmt->error]);
                    $stmt->close();
                    break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ switch
                }
                $order_id = $conn->insert_id;
                $stmt->close();

                // 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –≤ order_items —Ç–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è in_stock
                $stmt_insert_item = $conn->prepare("INSERT INTO order_items (order_id, product_id, product_name, product_price, quantity) VALUES (?, ?, ?, ?, ?)"); // –î–æ–¥–∞–Ω–æ product_id
                $stmt_update_stock = $conn->prepare("UPDATE products SET in_stock = in_stock - ? WHERE id = ? AND in_stock >= ?");

                foreach ($items as $item) {
                    $product_id = (int)$item['id']; // –û—Ç—Ä–∏–º—É—î–º–æ ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
                    $product_name = $conn->real_escape_string($item['name']);
                    $product_price = (float)$item['price'];
                    $quantity = (int)$item['quantity'];
                    
                    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    $stmt_insert_item->bind_param("iisdi", $order_id, $product_id, $product_name, $product_price, $quantity); // –î–æ–¥–∞–Ω–æ product_id
                    $stmt_insert_item->execute();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
                    $stmt_update_stock->bind_param("iii", $quantity, $product_id, $quantity);
                    $stmt_update_stock->execute();
                }
                $stmt_insert_item->close();
                $stmt_update_stock->close();

                // 3. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                $telegram_message_admin = "*–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ‚Ññ{$order_id}*\n\n";
                $telegram_message_admin .= "*–ü–æ–∫—É–ø–µ—Ü—å:*\n";
                $telegram_message_admin .= "–Ü–º'—è: {$customer_name}\n";
                $telegram_message_admin .= "Telegram: @{$customer_telegram}\n";
                $telegram_message_admin .= "–¢–µ–ª–µ—Ñ–æ–Ω: {$customer_phone}\n";
                $telegram_message_admin .= "–î–æ—Å—Ç–∞–≤–∫–∞: " . ($needs_delivery ? "–¢–∞–∫ (+50 –≥—Ä–Ω)" : "–ù—ñ") . "\n";
                if ($needs_delivery && !empty($customer_address)) {
                    $telegram_message_admin .= "–ö—ñ–º–Ω–∞—Ç–∞: {$customer_address}\n";
                }
                $telegram_message_admin .= "\n*–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n";
                foreach ($items as $item) {
                    $telegram_message_admin .= "‚Äî {$item['name']} ({$item['price']} –≥—Ä–Ω) x {$item['quantity']} —à—Ç\n";
                }
                $telegram_message_admin .= "\n*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {$total_amount} –≥—Ä–Ω\n";
                $telegram_message_admin .= "\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∞–π—Ç—ñ](" . WEBSITE_BASE_URL . "#products)"; // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏

                if (!sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, $telegram_message_admin)) {
                    error_log("Failed to send Telegram notification to admin for order ID: " . $order_id);
                }

                // 4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –ø–æ–∫—É–ø—Ü—é
                $telegram_message_customer = "üéâ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{$order_id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!* üéâ\n\n";
                $telegram_message_customer .= "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ ObshchagaSHOP!\n";
                $telegram_message_customer .= "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n\n";
                $telegram_message_customer .= "*–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n";
                foreach ($items as $item) {
                    $telegram_message_customer .= "‚Äî {$item['name']} ({$item['price']} –≥—Ä–Ω) x {$item['quantity']} —à—Ç\n";
                }
                $telegram_message_customer .= "\n*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {$total_amount} –≥—Ä–Ω\n";
                $telegram_message_customer .= "\n[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏](" . WEBSITE_BASE_URL . "#products)"; // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏

                if (!sendTelegramMessage($customer_telegram_chat_id, $telegram_message_customer)) {
                    error_log("Failed to send Telegram notification to customer for order ID: " . $order_id);
                }

                echo json_encode(["status" => "success", "order_id" => $order_id]);

            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "Missing required fields for placing order."]);
            }
            break;

        case 'update_order_status': // NEW ACTION: Update order status
            if (isset($_POST['order_id']) && isset($_POST['status'])) {
                $order_id = (int)$_POST['order_id'];
                $new_status = $conn->real_escape_string($_POST['status']);

                // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∞ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                $stmt_get_order = $conn->prepare("SELECT status, customer_telegram_chat_id, customer_telegram FROM orders WHERE id = ?");
                $stmt_get_order->bind_param("i", $order_id);
                $stmt_get_order->execute();
                $result_get_order = $stmt_get_order->get_result();
                if ($result_get_order->num_rows === 0) {
                    http_response_code(404);
                    echo json_encode(["status" => "error", "message" => "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]);
                    $stmt_get_order->close();
                    break;
                }
                $order_data = $result_get_order->fetch_assoc();
                $current_status = $order_data['status'];
                $customer_chat_id = $order_data['customer_telegram_chat_id'];
                $customer_telegram_username = $order_data['customer_telegram'];
                $stmt_get_order->close();

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
                $allowed_statuses = ['New', 'Confirmed', 'Cancelled'];
                if (!in_array($new_status, $allowed_statuses)) {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."]);
                    break;
                }

                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞ 'Cancelled' —ñ –≤—ñ–Ω –Ω–µ –±—É–≤ 'Cancelled' —Ä–∞–Ω—ñ—à–µ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
                if ($new_status === 'Cancelled' && $current_status !== 'Cancelled') {
                    $conn->begin_transaction();
                    try {
                        $stmt_items = $conn->prepare("SELECT product_id, quantity FROM order_items WHERE order_id = ?");
                        $stmt_items->bind_param("i", $order_id);
                        $stmt_items->execute();
                        $items_result = $stmt_items->get_result();

                        while ($item = $items_result->fetch_assoc()) {
                            $stmt_update_stock = $conn->prepare("UPDATE products SET in_stock = in_stock + ? WHERE id = ?");
                            $stmt_update_stock->bind_param("ii", $item['quantity'], $item['product_id']);
                            $stmt_update_stock->execute();
                            $stmt_update_stock->close();
                        }
                        $stmt_items->close();

                        $stmt_update_order = $conn->prepare("UPDATE orders SET status = ? WHERE id = ?");
                        $stmt_update_order->bind_param("si", $new_status, $order_id);
                        $stmt_update_order->execute();
                        $stmt_update_order->close();

                        $conn->commit();
                        sendTelegramMessage($customer_chat_id, "‚ùå *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.* –¢–æ–≤–∞—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥.");
                        echo json_encode(["status" => "success", "message" => "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥."]);

                    } catch (Exception $e) {
                        $conn->rollback();
                        http_response_code(500);
                        echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: " . $e->getMessage()]);
                    }
                } 
                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∑ 'Cancelled' –Ω–∞ —ñ–Ω—à–∏–π, —Ü–µ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞
                elseif ($current_status === 'Cancelled' && $new_status !== 'Cancelled') {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."]);
                }
                // –ó–≤–∏—á–∞–π–Ω–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, New -> Confirmed)
                else {
                    $stmt = $conn->prepare("UPDATE orders SET status = ? WHERE id = ?");
                    $stmt->bind_param("si", $new_status, $order_id);

                    if ($stmt->execute()) {
                        $message_to_customer = "";
                        if ($new_status === 'Confirmed') {
                            $message_to_customer = "‚úÖ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!* –ú–∏ –≥–æ—Ç—É—î–º–æ –π–æ–≥–æ –¥–æ –≤–∏–¥–∞—á—ñ/–¥–æ—Å—Ç–∞–≤–∫–∏.";
                        } elseif ($new_status === 'New') {
                             $message_to_customer = "‚ÑπÔ∏è *–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ`{$order_id}` –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–ù–æ–≤–µ'.*";
                        }
                        
                        if (!empty($message_to_customer)) {
                            sendTelegramMessage($customer_chat_id, $message_to_customer);
                        }
                        echo json_encode(["status" => "success"]);
                    } else {
                        http_response_code(500);
                        echo json_encode(["status" => "error", "message" => "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " . $stmt->error]);
                    }
                    $stmt->close();
                }
            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å."]);
            }
            break;

        case 'import_products_csv':
            if (isset($_FILES['csv_file']) && $_FILES['csv_file']['error'] === UPLOAD_ERR_OK) {
                $file = $_FILES['csv_file'];
                $file_tmp_name = $file['tmp_name'];

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
                $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
                if ($file_extension !== 'csv') {
                    http_response_code(400);
                    echo json_encode(["status" => "error", "message" => "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ CSV."]);
                    exit();
                }

                $added_count = 0;
                $updated_count = 0;
                $errors = [];
                $line_num = 1; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

                if (($handle = fopen($file_tmp_name, "r")) !== FALSE) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
                    fgetcsv($handle); 
                    $line_num++;

                    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                        // –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É,—Ü—ñ–Ω–∞ –∑–∞ —à—Ç—É–∫—É,–∫—ñ–ª—å–∫—ñ—Å—Ç—å,–∞–∫—Ü—ñ—è —è–∫—à–æ —î (1/0),–≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏,–æ–ø–∏—Å,URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        // –ó–º—ñ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä –æ—á—ñ–∫—É—î–º–æ 7 —Å—Ç–æ–≤–ø—Ü—ñ–≤
                        if (count($data) >= 7) {
                            $name = trim($data[0]);
                            $price = filter_var(trim($data[1]), FILTER_VALIDATE_FLOAT);
                            $in_stock = filter_var(trim($data[2]), FILTER_VALIDATE_INT);
                            $is_on_sale = filter_var(trim($data[3]), FILTER_VALIDATE_INT); // 1 –∞–±–æ 0
                            $discount_percentage = filter_var(trim($data[4]), FILTER_VALIDATE_INT);
                            $description = trim($data[5]);
                            $image_url = trim($data[6]); // –ù–æ–≤–µ –ø–æ–ª–µ –¥–ª—è URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

                            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
                            if (empty($name)) {
                                $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.";
                                $line_num++;
                                continue;
                            }
                            if ($price === false || $price <= 0) {
                                $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–µ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{$name}'.";
                                $line_num++;
                                continue;
                            }
                            if ($in_stock === false || $in_stock < 0) {
                                $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{$name}'.";
                                $line_num++;
                                continue;
                            }
                            if ($is_on_sale === false || ($is_on_sale !== 0 && $is_on_sale !== 1)) {
                                $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—Ü—ñ—ó (–æ—á—ñ–∫—É—î—Ç—å—Å—è 0 –∞–±–æ 1) –¥–ª—è —Ç–æ–≤–∞—Ä—É '{$name}'.";
                                $line_num++;
                                continue;
                            }
                            if ($discount_percentage === false || $discount_percentage < 0 || $discount_percentage > 100) {
                                $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–µ–≤—ñ—Ä–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏ (–æ—á—ñ–∫—É—î—Ç—å—Å—è 0-100) –¥–ª—è —Ç–æ–≤–∞—Ä—É '{$name}'.";
                                $line_num++;
                                continue;
                            }
                            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —î
                            if (!empty($image_url) && !filter_var($image_url, FILTER_VALIDATE_URL)) {
                                // –Ø–∫—â–æ —Ü–µ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π URL, –º–æ–∂–ª–∏–≤–æ, —Ü–µ –ª–æ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É.
                                // –ù–∞—Ä–∞–∑—ñ –º–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ü–µ, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Å—É–≤–æ—Ä—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
                            }


                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é
                            $stmt_check = $conn->prepare("SELECT id FROM products WHERE name = ?");
                            $stmt_check->bind_param("s", $name);
                            $stmt_check->execute();
                            $result_check = $stmt_check->get_result();

                            if ($result_check->num_rows > 0) {
                                // –¢–æ–≤–∞—Ä —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
                                $row = $result_check->fetch_assoc();
                                $product_id = $row['id'];
                                $stmt_update = $conn->prepare("UPDATE products SET price = ?, in_stock = ?, is_on_sale = ?, description = ?, discount_percentage = ?, image_url = ? WHERE id = ?");
                                $stmt_update->bind_param("diisiisi", $price, $in_stock, $is_on_sale, $description, $discount_percentage, $image_url, $product_id);
                                if ($stmt_update->execute()) {
                                    $updated_count++;
                                } else {
                                    $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É '{$name}': " . $stmt_update->error;
                                    error_log("CSV Import Error (Update): " . $stmt_update->error . " for product '{$name}' on line {$line_num}");
                                }
                                $stmt_update->close();
                            } else {
                                // –¢–æ–≤–∞—Ä –Ω–µ —ñ—Å–Ω—É—î, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
                                $stmt_insert = $conn->prepare("INSERT INTO products (name, description, price, in_stock, discount_percentage, is_on_sale, image_url) VALUES (?, ?, ?, ?, ?, ?, ?)");
                                $stmt_insert->bind_param("ssdiiss", $name, $description, $price, $in_stock, $discount_percentage, $is_on_sale, $image_url);
                                if ($stmt_insert->execute()) {
                                    $added_count++;
                                } else {
                                    $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É '{$name}': " . $stmt_insert->error;
                                    error_log("CSV Import Error (Insert): " . $stmt_insert->error . " for product '{$name}' on line {$line_num}");
                                }
                                $stmt_insert->close();
                            }
                            $stmt_check->close();
                        } else {
                            $errors[] = "–†—è–¥–æ–∫ {$line_num}: –ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ (–æ—á—ñ–∫—É—î—Ç—å—Å—è 7) —É —Ä—è–¥–∫—É: " . implode(", ", $data);
                            error_log("CSV Import Error: Incorrect column count on line {$line_num}. Data: " . implode(", ", $data));
                        }
                        $line_num++;
                    }
                    fclose($handle);
                } else {
                    http_response_code(500);
                    echo json_encode(["status" => "error", "message" => "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ CSV-—Ñ–∞–π–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è."]);
                    exit();
                }

                if (empty($errors)) {
                    echo json_encode(["status" => "success", "message" => "–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", "added_count" => $added_count, "updated_count" => $updated_count]);
                } else {
                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 OK, –∞–ª–µ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —â–æ–± JS –º—ñ–≥ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON
                    echo json_encode(["status" => "warning", "message" => "–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏. –î–µ—Ç–∞–ª—ñ: " . implode("; ", $errors), "added_count" => $added_count, "updated_count" => $updated_count, "errors" => $errors]);
                }

            } else {
                http_response_code(400);
                echo json_encode(["status" => "error", "message" => "–í—ñ–¥—Å—É—Ç–Ω—ñ–π CSV-—Ñ–∞–π–ª –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."]);
            }
            break;

        default:
            http_response_code(400);
            echo json_encode(["status" => "error", "message" => "Unknown POST action."]);
            break;
    }
    $conn->close();
    exit();
}

// –Ø–∫—â–æ –¥—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–±–æ –º–µ—Ç–æ–¥ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
http_response_code(400);
echo json_encode(["status" => "error", "message" => "Invalid request method or missing action parameter."]);
$conn->close();
?>
